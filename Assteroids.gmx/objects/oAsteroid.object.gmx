<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rotation = 0;
rotSpeed = random_range(-2,2);
direction = random(360);
speed = random_range(1,3);

asteroidLevel = 3;
asteroidHealth = asteroidLevel;

asteroidMaxHealth = asteroidHealth;

smokeDir = 0;

NumPoints = irandom_range(6,15);

xToA[NumPoints] = 0;

for (i = 0; i &lt; NumPoints; i++){
    for (j = 0; j &lt; 2; j++){
        NumPointsXY[i,j] = irandom_range(5 * asteroidLevel, 13 * asteroidLevel);
    }
}

for (i = 0; i &lt; NumPoints; i++){
    pointAngle[i] = ((360/NumPoints) * i) + random_range(-5,5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (asteroidLevel &gt;= 2){
    for (k = 0; k &lt;= 2; k++){
  
    newAst = instance_create (x,y,oAsteroid);
    
    newAst.asteroidLevel = asteroidLevel - 1;
    newAst.asteroidHealth = (newAst.asteroidLevel) * 0.66;
    newAst.asteroidMaxHealth = newAst.asteroidHealth;
    newAst.speed = random_range(0, newAst.asteroidLevel);
    newAst.rotSpeed = random_range(-4 / newAst.asteroidLevel, 4 / newAst.asteroidLevel);
    
    newAst.NumPoints = irandom_range(6,15);
    newAst.xToA[newAst.NumPoints] = 0;
    
    
    for (i = 0; i &lt; newAst.NumPoints; i++){
        for (j = 0; j &lt; 2; j++){
            newAst.NumPointsXY[i,j] = irandom_range(5 * newAst.asteroidLevel, 13 * newAst.asteroidLevel);
        }
    }
    
    for (i = 0; i &lt; newAst.NumPoints; i++){
        newAst.pointAngle[i] = ((360/newAst.NumPoints) * i) + random_range(-5,5);
    }
    
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>RoomWrap();

//asteroidMissingHealth = asteroidMaxHealth - asteroidHealth;

rotation += rotSpeed;

for (i = 0; i &lt; NumPoints; i++){
    
    //initial positions    
    APointX = x + lengthdir_x(NumPointsXY[i,0], pointAngle[i]);
    APointY = y + lengthdir_y(NumPointsXY[i,1], pointAngle[i]);
    
    xToA[i] = point_distance(x,y,APointX,APointY);
}

if (AsteroidCollidesWith(oPlayer) &amp;&amp; oPlayer.invincible = false){
    DamageAsteroid(oPlayer);
    }
    
if (AsteroidCollidesWith(oBullet)){
    DamageAsteroid(oBullet);
}

if (AsteroidCollidesWith(oBomb)){
    DamageAsteroid(oBomb);
}

if (asteroidHealth &lt;= 0){

    //effect_create_below(ef_explosion, x, y, random_range(0.5,1.5),c_white);
    //effect_create_below(ef_ring, x, y, random_range(0.5,1.5),c_white);
    
    
    instance_destroy();
    
    instance_create(x,y,oAsteroidExplosion);
    
    /*
    for (i = 0; i &lt; random_range(2,4); i++){
        instance_create(x + random_range(-25,25), y + random_range(-25,25), oExplosion);
    }*/
    
    /*
    for (i = 0; i &lt; random_range(5,8); i++){
        instance_create(x + random_range(-5,5), y + random_range(-5,5), oExplosionParticle);
    }*/
    
    for (i = 0; i &lt; random_range(3,6); i++){
    exscale = asteroidLevel * 15;
        
        newex = instance_create(x + random_range(-exscale,exscale), y + random_range(-exscale,exscale), oAsteroidExplosionEffect);
        newex.image_xscale = random_range(asteroidLevel * 0.15, asteroidLevel*0.3);
        newex.image_yscale = newex.image_xscale;
        newex.lev = asteroidLevel;
    }
    
    numSmoke = irandom_range(asteroidLevel/0.5, asteroidLevel/0.8)
    for (i = 0; i &lt; numSmoke; i++){
        
        newSmoke = instance_create(x,y,oSmokeGen);
        newSmoke.smokeScale = asteroidLevel * 0.2;
        
        if (smokeDir != 0){
            newSmoke.direction = (smokeDir - 45) + (90/numSmoke) * i;
        } else {
            newSmoke.direction = random(360);
        }
        newSmoke.speed = 1 + (i * 0.5);
        
    }
    
    oGame.asteroidsKilled += 1;
    oGame.asteroidsRemaining -= 1;
    oGame.Score += 1;
    
        if (oGame.asteroidsRemaining &lt;= 0){
            if (oGame.lastPickup = oWeaponChargeShotPickup){
                oGame.pickupToSpawn = oWeaponRapidFirePickup;
                oGame.lastPickup = oWeaponRapidFirePickup
            } else {oGame.pickupToSpawn = oWeaponChargeShotPickup;
                    oGame.lastPickup = oWeaponChargeShotPickup;}
            newItem = instance_create(x,y,oGame.pickupToSpawn);
            newItem.direction = random(360);
            newItem.speed = random(2);
            oGame.asteroidsForDrop += 6;
            oGame.asteroidsRemaining = oGame.asteroidsForDrop;
        }
        
        if (oGame.asteroidsKilled mod 75 = 0){
            newItem = instance_create(x,y,oLifePickup);
            newItem.direction = random(360);
            newItem.speed = random(2);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 0; i&lt;NumPoints; i++){
    
       
    if (i + 1 &gt;= NumPoints){
    pointToUse = 0;
    } else {
    pointToUse = i+1;
    }
        
    //draw_set_color(make_color_rgb(random(255), random(255), random(255)))
    
    //draw the outline of the asteroid
    
    draw_set_colour(c_white);
    draw_set_alpha(1);
                 
    //outline
    draw_line(x + lengthdir_x(xToA[i], pointAngle[i] + rotation ), 
            y + lengthdir_y(xToA[i], pointAngle[i] + rotation ), 
            x + lengthdir_x(xToA[pointToUse], pointAngle[pointToUse] + rotation ), 
            y + lengthdir_y(xToA[pointToUse], pointAngle[pointToUse] + rotation));
     
    //fill in asteroid
    draw_set_color(c_black);
    draw_triangle(x, y,
            x + lengthdir_x(xToA[i], pointAngle[i] + rotation) * 0.85, 
            y + lengthdir_y(xToA[i], pointAngle[i] + rotation) * 0.85, 
            x + lengthdir_x(xToA[pointToUse], pointAngle[pointToUse] + rotation) * 0.85, 
            y + lengthdir_y(xToA[pointToUse], pointAngle[pointToUse] + rotation) * 0.85,
            false);
            
    //debug drawings
    if (global.Debug = true){
        draw_set_font(fInfo);
        draw_set_color(c_white);
    
    //draw each point as a point
    draw_point(x + lengthdir_x(xToA[i], pointAngle[i] + rotation), y + lengthdir_y(xToA[i], pointAngle[i] + rotation));
    
    //center point
        draw_rectangle(x-2,y-2,x+2,y+2,false);
        
    //draw asteroid health
        draw_set_colour (c_green);
        draw_text(x,y, "Level: " + string(asteroidLevel));
        
    //draw asteroid level
        draw_set_colour(c_yellow);
        draw_text(x,y + 10, "Health: " + string(asteroidHealth));
        
        /*
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_text(x,y,"o");
        */
        
    //draw number of each point
    
    /*draw_set_halign(fa_left);
    draw_set_valign(fa_top);
        draw_text(x + lengthdir_x(xToA[i], pointAngle[i] + rotation), 
                  y + lengthdir_y(xToA[i], pointAngle[i] + rotation),
                    string(i));*/
                    
                    
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
