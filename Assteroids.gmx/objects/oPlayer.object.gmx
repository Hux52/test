<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize control variables
maxSpeed = 10;
accel = 0.4;
rot = 8;

//weapons
shootX = x + lengthdir_x(sprite_get_width(sprite_index)/2,image_angle);
shootY = y + lengthdir_y(sprite_get_height(sprite_index)/2,image_angle);


//spawn weapons
if (instance_exists(oWeaponRapidFire) = false){
    instance_create(x,y,oWeaponRapidFire);
}

if (instance_exists(oWeaponChargeShot) = false){
    instance_create(x,y,oWeaponChargeShot);
}

//Initialize animations
if (instance_exists(oPlayerShipThrust) = false){
    instance_create(x,y,oPlayerShipThrust);
}

//Respawning
oGame.Lives -= 1;
invincible = true;
invincibilityTime = 3;
invincibilityTimeRemaining = invincibilityTime;
invFlash = false;
invFlashTimer = 1/(room_speed/4);

//Trail
trail = ds_list_create();
col = 0;
secondsSinceLastTrail = 0;
secondsBetweenTrails = 0.02;

trailLimit = 20;
size = 0;

//sparkles
timeBetweenSparkles = 0;
timeSinceLastSparkle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(trail);

audio_play_sound(choose(aPlayerDeath1,aPlayerDeath2,aPlayerDeath3,aPlayerDeath4,aPlayerDeath5), 0, false);
/*
for (i = 0; i &lt; random_range(6,10); i++){
    instance_create(x + random_range(-16,16), y + random_range(-16,16), oExplosion);
}
*/
starsToCreate = random_range(20,35);
for (i = 0; i &lt; starsToCreate; i++){
    newStar = instance_create(x,y,oStar);
    newStar.direction = (360/starsToCreate) * i;
    newStar.speed =  random_range(4,12);
    newStar.lifetime = random_range(0.9,1);
    newStar.image_xscale = random_range(0.9,1.1);
    newStar.image_yscale = newStar.image_xscale;
    newStar.col = random(255);
}
    audio_stop_sound(aCharging1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>oGame.currentWeapon = instance_nearest(x,y,oGame.weaponToUse);

godmode = global.Debug;

//Shooting
shootX = x + lengthdir_x(sprite_get_width(sprite_index)/2,image_angle);
shootY = y + lengthdir_y(sprite_get_height(sprite_index)/2,image_angle);

//Wrapping around room
RoomWrap();

//update invincibility and flashing timers
invFlashTimer -= 1/room_speed;
if (godmode = false) invincibilityTimeRemaining -= 1/room_speed;

if (godmode) invincibilityTimeRemaining = 3;

//if we're invincible
if (invincibilityTimeRemaining &gt; 0){
    invincible = true;
    
    if (godmode = false){
        if (invFlashTimer &lt;= 0){
            invFlash = !invFlash;
            invFlashTimer = 1/15;
            }
    }
    
    if (invFlash = true){
        image_alpha = 0;
    } else { image_alpha = 1; 
    }
} else {
    invincible = false;
    image_alpha = 1;
}

/*
//shop interaction
if (instance_exists(oShop)){
shop = instance_nearest(x,y,oShop)

    if (point_distance(x, y, shop.x, shop.y) &gt; 200){
        shop.displayShop = false;
    }
    
    if (instance_exists(shop) &amp;&amp; point_distance(x, y, shop.x, shop.y) &lt; 200){
        shop.displayShop = true;
        
    if (shop.displayShop = true &amp;&amp; shop.sold = false){
        if (keyboard_check_pressed(ord("Z"))){
            shop.sell = true;
            shop.sold = true;
            }
        }   
    }
}
*/

//pickup collection
PickupCollision();

secondsSinceLastTrail += 1/room_speed;
//add to trail
if (secondsSinceLastTrail &gt;= secondsBetweenTrails){
        ds_list_add(trail, instance_create(x, y, oTrailPart));
        secondsSinceLastTrail = 0;
    }
        
//limit trail size
if (ds_list_size(trail) &gt;= trailLimit) {
        with(trail[|0])instance_destroy();
        ds_list_delete(trail, 0);
    }
    
//create sparkles
timeSinceLastSparkle += 1/room_speed;
if (timeSinceLastSparkle &gt; timeBetweenSparkles){
        sparkle = instance_create(x + lengthdir_x(16 + random(5), (direction - 180) + random_range(-15,15)), y + lengthdir_y(16 + random(5), (direction - 180) + random_range(-15,15)), oSparkle);
        sparkle.image_blend = make_color_hsv(random(255),255,255);
        sparkle.image_xscale = random_range(0.1,0.1 * (oGame.totalLevel/2));
        sparkle.image_yscale = sparkle.image_xscale;
        sparkle.dir = direction + 180 + random_range(-20,20);
        sparkle.spd = random(0.1) + speed/15;
        sparkle.lifetime = 1 + oGame.totalLevel/3;
        
    timeSinceLastSparkle = 0;
    timeBetweenSparkles = random(0.05)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_color(make_colour_rgb(random(255), random(255), random(255)))

col += 255/room_speed;
draw_set_color(c_white);
if (!ds_list_empty(trail)){
    for (i = 1; i &lt; ds_list_size(trail); i++){  
size = speed;
    //draw_set_colour(make_colour_hsv((255/ds_list_size(trail))* i + col,255,255));
    draw_set_colour(make_colour_hsv((255/ds_list_size(trail))* i + col,255,(255/ds_list_size(trail))* i));
    if (point_distance(trail[|i].x, trail[|i].y, trail[|i-1].x, trail[|i-1].y) &lt; 200){
            //draw the trail
            draw_line_width(trail[|i].x, trail[|i].y, trail[|i-1].x, trail[|i-1].y, 1 + ((i/trailLimit) * (size/5) * oGame.totalLevel/2));
            }
    }
}
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha)

if (global.Debug){
if (oGame.currentWeapon != noone){
    draw_set_font(fInfo)
        draw_text(x,y,"weapon: " + object_get_name(oGame.currentWeapon.object_index) + ", level: " + string(oGame.currentWeapon.weaponLevel));
    } else {draw_text(x,y,"weapon: noone");}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
