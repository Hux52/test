<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerShipAlternate</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oPlayer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
angleOfMotion = 0;

accel = 0.7
maxSpeed = 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
    
image_angle = direction;

if (instance_exists(oPlayerShipThrust)){
    thrust = instance_nearest(x, y, oPlayerShipThrust)
}

//Maximum speed cap
    if (speed &gt;= maxSpeed){speed = maxSpeed;}
    
//keyboard
if (global.useGamepad = false){

    //Update thrust animation
    if (instance_exists(thrust)){
        thrust.x = x + lengthdir_x(16,image_angle + 180);
        thrust.y = y + lengthdir_y(16,image_angle + 180);
        thrust.image_angle = image_angle;
        
        thrust.image_xscale = 0.5 + 5/speed;
        thrust.image_yscale = 1/speed;
        
            if (thrust.image_xscale &gt; 2){
                thrust.image_xscale = 2;
            }
        
            if (thrust.image_yscale &gt; 1){
                thrust.image_yscale = 1;
            }
    }
    
    //Move
    
    if (keyboard_check(vk_left)) {
        
        angleOfMotion = 180;
        hspeed += lengthdir_x(accel, angleOfMotion);
        vspeed += lengthdir_y(accel, angleOfMotion);
        
        if (instance_exists(thrust)){
            thrust.image_index = 0;
            thrust.visible = true;
        }
    }
    
    if (keyboard_check(vk_right)) {
        angleOfMotion = 360;
        hspeed += lengthdir_x(accel, angleOfMotion);
        vspeed += lengthdir_y(accel, angleOfMotion);
        
            if (instance_exists(thrust)){
                thrust.image_index = 0;
                thrust.visible = true;
            }
        }
        
    if (keyboard_check(vk_up)) {
        angleOfMotion = 90;
        hspeed += lengthdir_x(accel, angleOfMotion);
        vspeed += lengthdir_y(accel, angleOfMotion);
        
        if (instance_exists(thrust)){
            thrust.image_index = 0;
            thrust.visible = true;
        }
        }
        
    if (keyboard_check(vk_down)) {
        angleOfMotion = -90;
        hspeed += lengthdir_x(accel, angleOfMotion);
        vspeed += lengthdir_y(accel, angleOfMotion);
        
        if (instance_exists(thrust)){
            thrust.image_index = 0;
            thrust.visible = true;
        }
        }
    
    //Hide thrust
    if (instance_exists(thrust)){
        if (thrust.image_index &gt;= thrust.image_number - 1){
            thrust.visible = false;
        }
    }
}
//gamepad
else {

//Maximum speed cap
    if (speed &gt;= maxSpeed){speed = maxSpeed;}


    if (global.lhaxis &gt; 0){
        angleOfMotion = 0;
        
        hspeed += lengthdir_x(accel * (abs(global.lhaxis)), angleOfMotion);
        vspeed += lengthdir_y(accel * (abs(global.lvaxis)), angleOfMotion);
    }
    
    if (global.lhaxis &lt; 0){
        angleOfMotion = 180;
        
        hspeed += lengthdir_x(accel * (abs(global.lhaxis)), angleOfMotion);
        vspeed += lengthdir_y(accel * (abs(global.lvaxis)), angleOfMotion);
    }
    
    if (global.lvaxis &gt; 0){
        angleOfMotion = 270;
        
        hspeed += lengthdir_x(accel * (abs(global.lhaxis)), angleOfMotion);
        vspeed += lengthdir_y(accel * (abs(global.lvaxis)), angleOfMotion);
    }
    
    if (global.lvaxis &lt; 0){
        angleOfMotion = 90;
        
        hspeed += lengthdir_x(accel * (abs(global.lhaxis)), angleOfMotion);
        vspeed += lengthdir_y(accel * (abs(global.lvaxis)), angleOfMotion);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
