<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//debug mode
global.Debug = false;

//pause and menu stuff
mainMenu = ds_list_create();
ds_list_add(mainMenu, "New Game");
ds_list_add(mainMenu, "Options");
ds_list_add(mainMenu, "Quit Game");

gameMenu = ds_list_create();
ds_list_add(gameMenu, "Resume Game");
ds_list_add(gameMenu, "New Game");
ds_list_add(gameMenu, "Options");
ds_list_add(gameMenu, "Quit Game");

optionsMenu = ds_list_create();
ds_list_add(optionsMenu, "Placeholder settings 1");
ds_list_add(optionsMenu, "Placeholder settings 2");
ds_list_add(optionsMenu, "Placeholder settings 3");
ds_list_add(optionsMenu, "Back");

options = ds_list_create();
ds_list_add(options, false, false, true);

oldActiveMenu = mainMenu;
activeMenu = mainMenu;
optionsActive = false;
curSelect = 0;
showMenu = true;
pause = false;
scale = 1;

//stats
Score = 0;
Lives = 3;
timeSurvived = 0;
totalTime = 0;
GameOver = false;

//respawn
timeLeftToRespawn = 0;
respawnTime = 3;
selectedShip = noone;

//Spawning asteroids
spawnX = 0;
spawnY = 0;
secondsBetweenSpawns = 0;
spawnTimer = 0;
maxAsteroids = 0;
totalLevel = 0;

//Spawning items from asteroids
asteroidsKilled = 0;
asteroidsForDrop = 6;
asteroidsRemaining = asteroidsForDrop;

lastPickup = choose(oWeaponChargeShotPickup, oWeaponRapidFirePickup);
pickupToSpawn = noone;

//Player weapons
currentWeapon = noone;
weaponToUse = noone;

//Enemy spawning
timeSinceLastEnemy = 0;
timeBetweenEnemies = 45;

//Gamepad Controls
global.useGamepad = false; //starts out as false for keyboard controls by default

global.lhaxis = 0; //left stick horizontal
global.lvaxis = 0; //left stick vertical
global.rhaxis = 0; //right stick horizontal
global.rvaxis = 0; //right stick vertical

for (i = 0; i &lt; gamepad_get_device_count(); i++){
    //go through every usb slot
   if gamepad_is_connected(i){
   //if the current loop cycle matches up with the slot number that the gamepad is
   //connected to, save the slot number to a variable
       global.padToUse = i;
       //now we know there's a gamepad connected and we can enable the gamepad controls
       global.useGamepad = true;
       }
   }
   
surface_resize(application_surface,room_width * 0.8, room_height * 0.8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(mainMenu);
ds_list_destroy(gameMenu);
ds_list_destroy(optionsMenu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_overlay(global.Debug);

//Gamepad stuff

if (global.useGamepad = true){
//if a gamepad is connected, assign the l/r stick values to
//a variable with a shorter name for the sake of convenience
global.lhaxis = gamepad_axis_value(global.padToUse, gp_axislh);
global.lvaxis = gamepad_axis_value(global.padToUse, gp_axislv);
global.rhaxis = gamepad_axis_value(global.padToUse, gp_axisrh);
global.rvaxis = gamepad_axis_value(global.padToUse, gp_axisrv);
}

//gamepad stuff ends

totalTime += 1/room_speed;

if (instance_exists(oWeaponRapidFire) &amp;&amp; instance_exists(oWeaponChargeShot)){
    totalLevel = oWeaponChargeShot.weaponLevel + oWeaponRapidFire.weaponLevel;
}

maxAsteroids = 5 + (totalLevel) * 2;
secondsBetweenSpawns = 0.5 + ((10 / (totalLevel + 1)) - ((maxAsteroids/instance_number(oAsteroid))/3));

//Toggle Debug mode with f1
if (keyboard_check_pressed(vk_f1)){
    global.Debug = !(global.Debug);
}

if (room = rGame){
    
    //increment spawn timer
    if (pause = false) spawnTimer += 1/room_speed;
    
    if (instance_exists(oPlayer)){
        if (pause = false) timeSurvived += 1/room_speed;
    }
    
    //random spawn position
    if (choose(true,false)){
        spawnX = choose(-32,room_width + 32)
        spawnY = random_range(-32,room_height + 32);
    } else {
        spawnX = random_range(-32,room_width + 32);
        spawnY = choose(-32,room_height + 32);
    }
    
    //spawn asteroids
    if (spawnTimer &gt;= secondsBetweenSpawns &amp;&amp; instance_number(oAsteroid) &lt; maxAsteroids){
        instance_create(spawnX,spawnY, oAsteroid);
        spawnTimer = 0;
    }
    
    //spawn enemies
    if (timeSinceLastEnemy &gt;= timeBetweenEnemies){
        timeSinceLastEnemy = 0;
        instance_create(spawnX,spawnY,oEnemyBomb);
        timeBetweenEnemies = 30 + (random_range(-10,10))
    }
    
    //Spawn depth settings object
    if (instance_exists(oDepthSettings) = false){
        instance_create(x,y,oDepthSettings);
    }
    
    //Spawn HUD object
    if (instance_exists(oHUD) = false){
        instance_create(x,y,oHUD);
    }
    
    //Debug keys
    if (global.Debug = true){
        //Toggle HUD with "e"
        if (keyboard_check_pressed(ord("E"))){
            oHUD.visible = !(oHUD.visible);
        }
        
        //Spawn asteroid on click
        if (mouse_check_button_pressed(mb_left)){
            instance_create(mouse_x,mouse_y,oAsteroid);
        }
        
        //Spawn enemy on click
        if (mouse_check_button_pressed(mb_right)){
            instance_create(mouse_x,mouse_y, oBomb);
        }   
    }
    
    //Set GameOver to true if we're out of lives
    //To indicate that the game has ended
    if (Lives &lt;= 0 &amp;&amp; instance_exists(oPlayer) = false) {
        GameOver = true;
    }
    
    //if the player is dead, reset some variables and respawn after some time
    if (instance_exists(oPlayer) = false){
        if (instance_exists(oPlayerShipThrust)){
            with(oPlayerShipThrust){instance_destroy();}
        }
        
        timeSurvived = 0;
        timeLeftToRespawn -= 1/room_speed;
                
        if (timeLeftToRespawn &lt;= 0 &amp;&amp; Lives &gt; 0){
            if (instance_exists(oPlayer) = false){
                instance_create(room_width/2, room_height/2, oPlayerShipAlternate);
                timeLeftToRespawn = respawnTime;
            }
        }
    }
}

if (keyboard_check_pressed (vk_escape)){
    showMenu = !showMenu;
    activeMenu = oldActiveMenu;
    curSelect = 0;
}

if (scale &lt;= 2){
    scale *= 1.3;
}

if (showMenu){
    if (keyboard_check_pressed(vk_up)){
        curSelect -= 1;
        scale = 1;
    }
    
    if (keyboard_check_pressed(vk_down)){
        curSelect += 1;
        scale = 1;
    }
    
    if (curSelect &lt; 0){
        curSelect = ds_list_size(activeMenu) - 1;
    }
    if (curSelect &gt;= ds_list_size(activeMenu)){
        curSelect = 0;
    }
    
    if (keyboard_check_pressed(vk_enter)){
        switch(activeMenu[|curSelect]){
        case "New Game":
            if (room = 0){
            room_goto(rGame);
            }
            else {
            room_restart();
                if (instance_exists(oPlayer)){
                    with (oPlayer){instance_destroy();}
                }
            Score = 0;
            Lives = 3;
            timeSurvived = 0;
            totalTime = 0;
            GameOver = false;
            
            timeLeftToRespawn = 0;
            //Player weapons
            currentWeapon = noone;
            weaponToUse = noone;
            
            }
            showMenu = false;
        break;
        
        case "Options":
            curSelect = 0;
            oldActiveMenu = activeMenu;
            activeMenu = optionsMenu;
        break;
        
        case "Back":
            activeMenu = oldActiveMenu;
            curSelect = ds_list_find_index(activeMenu, "Options");
        break;
        
        case "Quit Game":
            game_end();
        break;
        
        case "Resume Game":
            showMenu = false;
        break;
        
        case "Placeholder settings 1":
            options[|0] = !options[|0];
        break;
        
        case "Placeholder settings 2":
            options[|1] = !options[|1];
        break;
        
        case "Placeholder settings 3":
            options[|2] = !options[|2];
        break;
        
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = 0;
margin = 10;
CurrentY = 10;

//Debug
if (global.Debug = true){
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_alpha(1);
draw_set_colour(c_white);
draw_set_font(fInfo);
DrawTextAndUpdateCurrentY("FPS: " + string(fps));
DrawTextAndUpdateCurrentY("Max asteroids: " + string(maxAsteroids));


if (gamepad_is_supported()){
    DrawTextAndUpdateCurrentY("Gamepad Supported");
}

DrawTextAndUpdateCurrentY("seconds between spawns: " + string(secondsBetweenSpawns));


for (i = 0; i &lt; gamepad_get_device_count(); i++){
    DrawTextAndUpdateCurrentY("slot " + string(i) + ": " + string(gamepad_is_connected(i)));
}

    if (gamepad_is_connected(global.padToUse)){

        DrawTextAndUpdateCurrentY("Gamepad " + string(global.padToUse) + " Connected");
        DrawTextAndUpdateCurrentY("Left stick horizontal: " + string(global.lhaxis));
        DrawTextAndUpdateCurrentY("Left stick vertical: " + string(global.lvaxis));
        DrawTextAndUpdateCurrentY("Right stick horizontal: " + string(global.rhaxis));
        DrawTextAndUpdateCurrentY("Right stick vertical: " + string(global.rvaxis));
        }
    
    
    
    if (showMenu){
        draw_set_halign(fa_right);
        draw_set_valign(fa_top);
        draw_text(room_width, 0, "menu list size: " + string(ds_list_size(activeMenu)));
        draw_text(room_width, 15, "curSelect: " + string(curSelect));
        draw_text(room_width, 30, "currently selected option: " + string(activeMenu[|curSelect]))
        for (i = 0; i &lt; ds_list_size(options); i++){
            draw_text(room_width, 45 + (15*i), "option " + string(i) + ": " + string(options[|i]));
        }
    }
    
}

if (showMenu){
draw_set_font(fMenu);
    for (i = 0; i &lt; ds_list_size(activeMenu); i++){
        draw_set_color(c_white);
        draw_set_halign(fa_left);
        draw_set_valign(fa_center);
        if (i != curSelect){
            draw_text(10, (room_height/2) + string_height(string(activeMenu[|i])) * i, string(activeMenu[|i]));
        }
        if (activeMenu = optionsMenu){
            if (options[|i] = true){
                textToDraw = "[X]"
            } else {textToDraw = "[ ]"}
            if (i &lt; ds_list_size(optionsMenu) - 1){
                if (i != curSelect){
                draw_text(10 + string_width(string(optionsMenu[|i])), room_height/2 + string_height(string(optionsMenu)) * i, textToDraw);
                }
            }
        }
    }
    draw_set_color(c_red);
    if (activeMenu = optionsMenu){
    
            if (options[|curSelect] = true){
                textToDraw = "[X]"
            } else {textToDraw = "[ ]"}
    if (curSelect &lt; ds_list_size(optionsMenu) - 1){
        draw_text(10 * scale, room_height/2 + string_height(string(optionsMenu[|curSelect])) * curSelect, string(optionsMenu[|curSelect]) + textToDraw);
    } else {draw_text(10 * scale, room_height/2 + string_height(string(optionsMenu[|curSelect])) * curSelect, string(optionsMenu[|curSelect]));}
    } else {
    draw_text(10 * scale, room_height/2 + string_height(string(activeMenu[|curSelect])) * curSelect, string(activeMenu[|curSelect]));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
