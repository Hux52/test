<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>owner = noone;

weaponLevel = 0;

if (instance_exists(oRapidFireEffect) = false){
    shoot = instance_create(x, y, oRapidFireEffect);
}

//Initialize firing variables
secondsBetweenShots = 0.2;
secondsSinceLastShot = 0;

weaponDamage = weaponLevel/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(oRapidFireEffect)){
    with(oRapidFireEffect){instance_destroy();}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if (instance_exists(oPlayer)){
    secondsSinceLastShot += 1/room_speed;
    
    owner = oPlayer.id;
    
    x = owner.shootX;
    y = owner.shootY;
    
    shoot.x = x;
    shoot.y = y;
  
if (global.useGamepad = true){
    pad = global.padToUse;
}
    
weaponDamage = 1/weaponLevel + 0.1*weaponLevel;
secondsBetweenShots = (0.33 / weaponLevel * 2);

if oGame.currentWeapon = id {
    if (keyboard_check(ord("X")) ||
    (global.useGamepad = true &amp;&amp; (
    gamepad_button_check(pad, gp_face1) ||
    gamepad_button_check(pad, gp_face2) ||
    gamepad_button_check(pad, gp_face3) ||
    gamepad_button_check(pad, gp_face4 )))) {
            if (secondsSinceLastShot &gt;= secondsBetweenShots){
                bull = instance_create(owner.shootX, owner.shootY, oRapidFireBullet);
                bull.hspeed = 12 * (lengthdir_x(1, owner.image_angle)) + owner.hspeed;
                bull.vspeed = 12 * (lengthdir_y(1, owner.image_angle)) + owner.vspeed;
                bull.image_angle = bull.direction;
                bull.bulletDamage = weaponDamage;
                bull.image_xscale = 1 + (weaponLevel/10);
                bull.image_yscale = bull.image_xscale;
                bull.lifetime = 0.5 + 1/weaponLevel;
                with(owner) {motion_add(image_angle + 180, oGame.currentWeapon.weaponDamage * 0.1);}
                secondsSinceLastShot = 0;
                
                basePitch = random_range(0.8, 1.2);
                
                audio_sound_gain(aRapidFireShoot1, 1 - 0.1 * weaponLevel, 0);
                audio_sound_gain(aRapidFireShoot2, 1 - 0.1 * weaponLevel, 0);
                
                audio_sound_pitch(aRapidFireShoot1, basePitch + 0.2 * weaponLevel);
                audio_sound_pitch(aRapidFireShoot2, basePitch + 0.2 * weaponLevel);
                audio_play_sound(choose(aRapidFireShoot1, aRapidFireShoot2), 0, false);
            }
        }
    if (keyboard_check_released(ord("X")) ||
        (global.useGamepad = true &amp;&amp; (
    gamepad_button_check(pad, gp_face1) ||
    gamepad_button_check(pad, gp_face2) ||
    gamepad_button_check(pad, gp_face3) ||
    gamepad_button_check(pad, gp_face4 )))) {
        secondsSinceLastShot *= 2;
    }
        
//Update shoot animation
if (instance_exists(shoot)){
    shoot.x = owner.shootX;
    shoot.y = owner.shootY;
    shoot.image_angle = owner.image_angle;
    
    if (secondsSinceLastShot &gt;= secondsBetweenShots/3){
        shoot.visible = false;
        shoot.image_xscale = 1;
    } else {
    shoot.visible = true
    shoot.image_xscale -= (5/room_speed) * weaponLevel;
    shoot.image_yscale = shoot.image_xscale;
    }
    
} else {
    shoot.visible = false;
    //shoot.image_xscale = 1;
    }

} else {
    shoot.visible = false;
    //shoot.image_xscale = 1;
    }
    
} else {
    shoot.visible = false;
    //shoot.image_xscale = 1;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
