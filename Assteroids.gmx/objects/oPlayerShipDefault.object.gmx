<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oPlayer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (instance_exists(oPlayerShipThrust)){
    thrust = instance_nearest(x, y, oPlayerShipThrust)
}

//Maximum speed cap
    if (speed &gt;= maxSpeed){speed = maxSpeed;}

//Update thrust animation
if (instance_exists(thrust)){
    thrust.x = x + lengthdir_x(16,image_angle + 180);
    thrust.y = y + lengthdir_y(16,image_angle + 180);
    thrust.image_angle = image_angle;
    
    thrust.image_xscale = 0.5 + 5/speed;
    thrust.image_yscale = 1/speed;
    
        if (thrust.image_xscale &gt; 2){
            thrust.image_xscale = 2;
        }
    
        if (thrust.image_yscale &gt; 1){
            thrust.image_yscale = 1;
        }
}

//Rotate
if (keyboard_check(vk_left)) {image_angle += rot;}
if (keyboard_check(vk_right)) {image_angle -= rot;}

//Accelerate
if (keyboard_check(vk_up)) {
/*    hspeed += lengthdir_x(accel, image_angle);
    vspeed += lengthdir_y(accel, image_angle);*/
    motion_add(image_angle, accel);
    
    //Max thrust
    
    if (instance_exists(thrust)){
        thrust.image_index = 0;
        thrust.visible = true;
        }
}

//Hide thrust
if (instance_exists(thrust)){
    if (thrust.image_index &gt;= thrust.image_number - 1){
        thrust.visible = false;
    }
}

//Reverse
if (keyboard_check(vk_down)) {
hspeed -= lengthdir_x(accel, image_angle);
vspeed -= lengthdir_y(accel, image_angle);
}

//Stabilize
if (keyboard_check(vk_space)){
    if (abs(hspeed) &gt; 0 || abs(vspeed) &gt; 0){
        hspeed -= accel*sign(hspeed) * abs(hspeed);
        vspeed -= accel*sign(vspeed) * abs(vspeed);
    }
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
