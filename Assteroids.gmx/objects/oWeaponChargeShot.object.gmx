<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>owner = noone;

weaponLevel = 0;

a = 0;

if (instance_exists(oChargeShotEffect) = false){
    shoot = instance_create(x, y, oChargeShotEffect);
}

//Initialize firing variables
currentCharge = 1;
minCharge = 1;
maxCharge = 3;
isCharging = false;
maxShotsOnScreen = 2;

secondsSinceLastShot = 0;
secondsBetweenShots = 0.5;

secondsSinceLastParticle = 0;
secondsBetweenParticles = 0.1;

sound = aCharging1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(oChargeShotEffect)){
    with(oChargeShotEffect){instance_destroy();}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(oPlayer)){
    owner = oPlayer.id;
if (owner != noone){
x = owner.shootX;
y = owner.shootY;

shoot.x = x;
shoot.y = y;

if (global.useGamepad = true){
    pad = global.padToUse;
}

if (a &lt;= 0) {a = currentCharge * 5}

minCharge = 1;
maxCharge = 2 + weaponLevel/3;
chargeSpeed = (0.5 + (0.3 * weaponLevel))/room_speed;
maxShotsOnScreen = 1 + weaponLevel;

secondsSinceLastShot += 1/room_speed;
secondsSinceLastParticle += 1/room_speed;

if oGame.currentWeapon = self.id {    
    
    if (keyboard_check(ord("X")) || 
        global.useGamepad = true &amp;&amp; (
            gamepad_button_check(pad, gp_face1) ||
            gamepad_button_check(pad, gp_face2) ||
            gamepad_button_check(pad, gp_face3) ||
            gamepad_button_check(pad, gp_face4 ))) {
            
                isCharging = true;
                a -= ((currentCharge * 4))/room_speed;
        
        if (secondsSinceLastParticle &gt;= secondsBetweenParticles){
            newPart = instance_create(x,y, oChargeParticle);
            newPart.image_angle = random(360);
            newPart.image_xscale = currentCharge;
            secondsBetweenParticles = random(0.2);
            secondsSinceLastParticle = 0;
        }
        
        if (!audio_is_playing(sound)) audio_play_sound(sound, 0, true);
        
        audio_sound_pitch(aCharging1, 1 + 0.1 * currentCharge + 0.1 * (weaponLevel));
        
        if (currentCharge &lt;= maxCharge){
            currentCharge += chargeSpeed;
        }
        
    } else if (keyboard_check_released(ord("X")) || 
                global.useGamepad = true &amp;&amp; (
                    gamepad_button_check_released(pad, gp_face1) ||
                    gamepad_button_check_released(pad, gp_face2) ||
                    gamepad_button_check_released(pad, gp_face3) ||
                    gamepad_button_check_released(pad, gp_face4) )) {
            if (instance_number(oChargeBullet) &lt; maxShotsOnScreen  &amp;&amp; secondsSinceLastShot &gt;= secondsBetweenShots){
                bull = instance_create(owner.shootX, owner.shootY, oChargeBullet);
                bull.hspeed = ((600/room_speed) - 2 * (currentCharge)) * (lengthdir_x(1, owner.image_angle)) + owner.hspeed;
                bull.vspeed = ((600/room_speed) - 2 * (currentCharge)) * (lengthdir_y(1, owner.image_angle)) + owner.vspeed;
                bull.powerLevel = (currentCharge);
                bull.lifeTime = (bull.powerLevel)*0.67;
                bull.bulletDamage = bull.powerLevel;
                
                with(owner) {motion_add(image_angle + 180, (oGame.currentWeapon.currentCharge) * 0.67);}
                
            
            secondsSinceLastShot = 0;
            
            }
            
            currentCharge = minCharge;
            isCharging = false;
            audio_stop_sound(sound);
            
            a = currentCharge * 5;
                
        }
        
//Update shoot animation
if (instance_exists(shoot)){
    shoot.x = owner.shootX;
    shoot.y = owner.shootY;
    shoot.image_angle = owner.image_angle;
    
    shoot.image_xscale = 0.33 * (max(minCharge,(currentCharge))) + random_range(currentCharge * 0.1, currentCharge * 0.2);
    shoot.image_yscale = 0.33 * (max(minCharge,(currentCharge))) + random_range(currentCharge * 0.1, currentCharge * 0.2);
    
        if (isCharging){
            if (instance_number(oChargeBullet) &lt; maxShotsOnScreen){
                shoot.visible = true;
            }
            } else {shoot.visible = false;}
        }
        } else {
        isCharging = false;
        shoot.visible = false;
        currentCharge = minCharge;
        audio_stop_sound(sound);
        
        }
    }
} else {
    isCharging = false;
    shoot.visible = false;
    currentCharge = minCharge;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.Debug){
    draw_set_color(c_orange);
    draw_text(x,y,"Charge: " + string(currentCharge));
}

if (isCharging){
    draw_set_color(c_white);
    draw_set_alpha(a/15);
    draw_circle(x, y, a * 3, true);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
